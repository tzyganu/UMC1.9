                Mage::getSingleton('adminhtml/session')->addError(
                    Mage::helper('{{namespace}}_{{module}}')->__('There was a problem saving the {{entityLabel}}.')
                );
                Mage::getSingleton('adminhtml/session')->set{{Entity}}Data($data);
                $this->_redirect('*/*/edit', array('id' => $this->getRequest()->getParam('id')));
                return;
            }
        }
        Mage::getSingleton('adminhtml/session')->addError(
            Mage::helper('{{namespace}}_{{module}}')->__('Unable to find {{entityLabel}} to save.')
        );
        $this->_redirect('*/*/');
    }

    /**
     * delete {{entityLabel}} - action
     *
     * @access public
     * @return void
     * {{qwertyuiop}}
     */
    public function deleteAction()
    {
        if ( $this->getRequest()->getParam('id') > 0) {
            try {
                ${{entity}} = Mage::getModel('{{namespace}}_{{module}}/{{entity}}');
                ${{entity}}->setId($this->getRequest()->getParam('id'))->delete();
                Mage::getSingleton('adminhtml/session')->addSuccess(
                    Mage::helper('{{namespace}}_{{module}}')->__('{{EntityLabel}} was successfully deleted.')
                );
                $this->_redirect('*/*/');
                return;
            } catch (Mage_Core_Exception $e) {
                Mage::getSingleton('adminhtml/session')->addError($e->getMessage());
                $this->_redirect('*/*/edit', array('id' => $this->getRequest()->getParam('id')));
            } catch (Exception $e) {
                Mage::getSingleton('adminhtml/session')->addError(
                    Mage::helper('{{namespace}}_{{module}}')->__('There was an error deleting {{entityLabel}}.')
                );
                $this->_redirect('*/*/edit', array('id' => $this->getRequest()->getParam('id')));
                Mage::logException($e);
                return;
            }
        }
        Mage::getSingleton('adminhtml/session')->addError(
            Mage::helper('{{namespace}}_{{module}}')->__('Could not find {{entityLabel}} to delete.')
        );
        $this->_redirect('*/*/');
    }

    /**
     * mass delete {{entityLabel}} - action
     *
     * @access public
     * @return void
     * {{qwertyuiop}}
     */
    public function massDeleteAction()
    {
        ${{entity}}Ids = $this->getRequest()->getParam('{{entity}}');
        if (!is_array(${{entity}}Ids)) {
            Mage::getSingleton('adminhtml/session')->addError(
                Mage::helper('{{namespace}}_{{module}}')->__('Please select {{entitiesLabel}} to delete.')
            );
        } else {
            try {
                foreach (${{entity}}Ids as ${{entity}}Id) {
                    ${{entity}} = Mage::getModel('{{namespace}}_{{module}}/{{entity}}');
                    ${{entity}}->setId(${{entity}}Id)->delete();
                }
                Mage::getSingleton('adminhtml/session')->addSuccess(
                    Mage::helper('{{namespace}}_{{module}}')->__('Total of %d {{entitiesLabel}} were successfully deleted.', count(${{entity}}Ids))
                );
            } catch (Mage_Core_Exception $e) {
                Mage::getSingleton('adminhtml/session')->addError($e->getMessage());
            } catch (Exception $e) {
                Mage::getSingleton('adminhtml/session')->addError(
                    Mage::helper('{{namespace}}_{{module}}')->__('There was an error deleting {{entitiesLabel}}.')
                );
                Mage::logException($e);
            }
        }
        $this->_redirect('*/*/index');
    }

    /**
     * mass status change - action
     *
     * @access public
     * @return void
     * {{qwertyuiop}}
     */
    public function massStatusAction()
    {
        ${{entity}}Ids = $this->getRequest()->getParam('{{entity}}');
        if (!is_array(${{entity}}Ids)) {
            Mage::getSingleton('adminhtml/session')->addError(
                Mage::helper('{{namespace}}_{{module}}')->__('Please select {{entitiesLabel}}.')
            );
        } else {
            try {
                foreach (${{entity}}Ids as ${{entity}}Id) {
                ${{entity}} = Mage::getSingleton('{{namespace}}_{{module}}/{{entity}}')->load(${{entity}}Id)
                            ->setStatus($this->getRequest()->getParam('status'))
                            ->setIsMassupdate(true)
                            ->save();
                }
                $this->_getSession()->addSuccess(
                    $this->__('Total of %d {{entitiesLabel}} were successfully updated.', count(${{entity}}Ids))
                );
            } catch (Mage_Core_Exception $e) {
                Mage::getSingleton('adminhtml/session')->addError($e->getMessage());
            } catch (Exception $e) {
                Mage::getSingleton('adminhtml/session')->addError(
                    Mage::helper('{{namespace}}_{{module}}')->__('There was an error updating {{entitiesLabel}}.')
                );
                Mage::logException($e);
            }
        }
        $this->_redirect('*/*/index');
    }
    /**
     * mass copy to store view - action
     *
     * @access public
     * @return void
     * {{qwertyuiop}}
     */
    public function massCopyToStoreViewAction() {
        ${{entity}}Ids = $this->getRequest()->getParam('{{entity}}');
        $store = $this->getRequest()->getParam('storeview');
        $suffix = $this->getRequest()->getParam('suffix');

        if (!is_array(${{entity}}Ids)) {
            $this->_getSession()->addError(
                Mage::helper('{{namespace}}_{{module}}')->__('Please select {{entitiesLabel}}.')
            );
        } else {
            try {
                foreach (${{entity}}Ids as ${{entity}}Id) {
                    ${{entity}} = Mage::getModel('{{namespace}}_{{module}}/{{entity}}')->load(${{entity}}Id);
                    $data = ${{entity}}->getData();
                    $selectedProductsFullInformation = ${{entity}}->getSelectedProducts();
                    $selectedProducts = array();
                    foreach ($selectedProductsFullInformation as $selectedProductsFullInformation) {
                        $selectedProduct = $selectedProductsFullInformation->getData();
                        $selectedProducts[$selectedProduct['entity_id']] = array(position => $selectedProduct['position']);
                    }
                    $selectedCategoriesFullInformation = ${{entity}}->getSelectedCategories();
                    $selectedCategories = array();
                    foreach ($selectedCategoriesFullInformation as $selectedCategoryFullInformation) {
                        $selectedCategory = $selectedCategoryFullInformation->getData();
                        $selectedCategories[] = $selectedCategory['entity_id'];
                    }
                    if ($store != -1) {
                        $data['store_id'] = array($store);
                    }
                    if (strlen($suffix) > 0) {
                        $data['url_key'] = $data['url_key'] . '-' . $suffix;
                    }
                    unset($data['entity_id'], $data['created_at'], $data['updated_at']);
                    $data['status'] = 0;
                    $model = Mage::getModel('{{namespace}}_{{module}}/{{entity}}');
                    $model->setData($data);
                    $model->setProductsData($selectedProducts);
                    $model->setCategoriesData($selectedCategories);
                    $model->save();
                }
                $this->_getSession()->addSuccess(
                        Mage::helper('{{namespace}}_{{module}}')->__('Total of %d {{entitiesLabel}} were successfully copied.', count(${{entity}}Ids))
                );
            } catch (Exception $e) {
                $this->_getSession()->addError($e->getMessage() . ' ' . Mage::helper('{{namespace}}_{{module}}')->__('There was an error copying {{entitiesLabel}}.'));
            }
        }
        $this->_redirect('*/*/');
    }